/**
 * Bud file for constants.
 */

"use strict";

var u = require('apeman-util'),
    string = u.string,
    glob = u.ext.glob,
    path = u.core.path;

var meta = require('../../.meta.json'),
    settings = require('../../../../../app/app_settings'),
    basedir = settings.basedir,
    publicDir = settings.publicDir,
    endpoints = require('../../../../../app/app_endpoints');

function constantBud(name, data) {
    return {
        mode: '444',
        force: true,
        path: path.resolve(__dirname, string.paramString(name) + '-constant.js'),
        tmpl: path.resolve(__dirname, '..', '.-constant.js.hbs'),
        get data() {
            return {
                module: [
                    meta.prefix,
                    path.basename(path.resolve(__dirname, '..'))
                ].join('.'),
                name: name,
                get data() {
                    var sorted = {};
                    Object.keys(data)
                        .sort(function (a, b) {
                            return a.localeCompare(b);
                        })
                        .forEach(function (key) {
                            sorted[key] = data[key];
                        });
                    return JSON.stringify(sorted, null, 4).replace(/\n/g, "\n\t\t");
                }
            }
        }
    }
}

function fileUrlData(dirname, pattern) {
    dirname = path.resolve(publicDir, dirname);
    pattern = path.resolve(dirname, pattern);
    var data = {};
    glob.sync(pattern)
        .forEach(function (filename) {
            var key = string.snakeString(path.basename(filename).split(/\./g).shift()).toUpperCase();
            data[key] = path.join('/', path.relative(publicDir, filename));
        });
    return data;
}

function endpointData(endpoints) {
    var data = {};
    Object.keys(endpoints).forEach(function (url) {
        var endpoint = endpoints[url];
        Object.keys(endpoint).forEach(function (method) {
            var namespace = string.snakeString(url.split(':')[0].replace(/^\//, '').replace(/\//, '_')).toUpperCase(),
                name = [namespace, method].join('_').toUpperCase(),
                param = string.snakeString(url.split(':').slice(1).join('_')).toUpperCase();
            if (param) {
                name = [name, param].join('_WITH_').replace(/__/g, '_');
            }
            data[name] = url;
        });
    });
    return data;
}


module.exports = [
    constantBud('partialUrl', fileUrlData('html/partials', '**/*.html')),
    constantBud('pageUrl', fileUrlData('', '*.html')),
    constantBud('imageUrl', fileUrlData('images', '*/*.+(jpg|jpeg|gif|png)')),
    constantBud('zipUrl', fileUrlData('zips', '*/*.zip')),
    constantBud('jsonUrl', fileUrlData('json', '**/*.json')),
    constantBud('linkUrl', require('./.links.data')),
    constantBud('apiUrl', endpointData(endpoints))
]
;


