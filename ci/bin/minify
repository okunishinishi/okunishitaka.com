#!/usr/bin/env node

"use strict";

/**
 * Minify files.
 * @type {exports}
 */

var h = require('../_helper'),
    async = h.async,
    tasks = h.tasks,
    fs = h.fs,
    glob = h.glob,
    config = require('../configs').minifyConfig;

process.chdir(h.basedir);

function minify(type, src, dest, callback) {
    new tasks.MinifyTask({
        type: type,
        src: src,
        dest: dest
    }).run(callback);
}
function lastModified(pattern, callback) {
    async.waterfall([
        function (callback) {
            glob(pattern, callback);
        },
        function (filenames, callback) {
            async.reduce(filenames, null, function (result, filename, callback) {
                async.waterfall([
                    function (callback) {
                        fs.stat(filename, callback);
                    },
                    function (stats, callback) {
                        var modifiedDate = new Date(stats.mtime);
                        if (result) {
                            result = (result < modifiedDate) ? modifiedDate : result;
                        } else {
                            result = modifiedDate;
                        }
                        callback(null, result);
                    }
                ], callback);
            }, callback);
        }
    ], callback);

}

async.waterfall([
    function (callback) {
        h.readJsonFile(config._statusFilename, callback);
    },
    function (status, callback) {
        if (!status) {
            status = {};
        }
        async.eachSeries(['js', 'css'], function (type, callback) {
            async.eachSeries([].concat(config[type]), function (config, callback) {
                if (!config) {
                    callback(null);
                    return;
                }
                var src = config.src,
                    dest = config.dest || '';
                async.waterfall([
                    function (callback) {
                        lastModified(src, callback);
                    },
                    function (modifyDate, callback) {
                        var lastModified = status[src] && status[src].lastModified;
                        var shouldModify = !lastModified || (new Date(lastModified) < modifyDate);
                        if (!shouldModify) {
                            callback(null);
                            return;
                        }
                        async.series([
                            function (callback) {
                                minify(type, src, dest, callback);
                            },
                            function (callback) {
                                if (!status[src]) {
                                    status[src] = {};
                                }
                                status[src].lastModified = modifyDate;
                                callback(null);
                            }
                        ], callback);
                    }
                ], callback);
            }, callback);
        }, function (err) {
            callback(err, status);
        });
    },
    function (status, callback) {
        h.writeJsonFile(config._statusFilename, status, callback);
    }
], h.done('Minify done!'));