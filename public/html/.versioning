#!/usr/bin/env node

/**
 * Append version to html script tags.
 */

"use strict";

var u = require('apeman-util'),
    fs = u.core.fs,
    path = u.core.path,
    glob = u.ext.glob,
    async = u.ext.async,
    updateQueryInUrl = require('../../app/util/update_query_in_url');

var pkg = require('../../package.json');

process.chdir(__dirname);

function loadFile(filename, callback) {
    var cheerio = require('cheerio');
    async.waterfall([
        function (callback) {
            fs.readFile(filename, callback);
        },
        function (buffer, callback) {
            var $ = cheerio.load(buffer.toString(), {
                decodeEntities: false,
                xmlMode: false
            });
            callback(null, $);
        }
    ], callback);
};

function versioning(filename, callback) {
    async.waterfall([
        function (callback) {
            loadFile(filename, callback);
        },
        function ($, callback) {
            var config = {
                script: 'src',
                link: 'href'
            };
            Object.keys(config).forEach(function (tagName) {
                $(tagName).each(function () {
                    var attrName = config[tagName];
                    var elm = $(this),
                        value = elm.attr(attrName);
                    if (!value) {
                        return;
                    }
                    var newValue = updateQueryInUrl(value, {
                        v: pkg.version
                    });
                    elm.attr(attrName, newValue);
                });
            });
            callback(null, $.html());
        },
        function (html, callback) {
            async.series([
                function (callback) {
                    fs.writeFile(filename, html, callback);
                },
                function (callback) {
                    console.log('File rewrited:', filename);
                    callback(null);
                }
            ], callback);
        }
    ], callback);
}

var filenames = path.resolve(__dirname, '*.html'),
    startAt = new Date();

async.waterfall([
    function (callback) {
        glob(filenames, callback);
    },
    function (filenames, callback) {
        async.each(filenames, function (filename, callback) {
            versioning(filename, callback);
        }, callback);
    }
], function (err) {
    if (err) {
        console.error(err);
    } else {
        var took = new Date() - startAt;
        console.log('versioning done!(%s ms)', took);
    }
})