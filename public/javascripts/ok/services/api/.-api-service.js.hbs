/**
 * {{Name}} api service.
 * @requires angular
 */
(function (ng) {
    "use strict";

    ng
        .module('{{module}}')
        .service('{{name}}ApiService', function {{Name}}ApiService ($http, apiService, {{#each constants}}{{this}}, {{/each}} urlFormatService) {
            var s = this,
                formatUrl = urlFormatService.formatUrl.bind(urlFormatService)

{{#if list}}            /**
             * List resources.
             * @param {object} params - Query data.
             * @returns {Promise} - Deferred promise.
             */
            s.list = function list(params) {
                var url = {{list}};
                return apiService.get(url, params);
            }

{{/if}}
{{#if one}}            /**
             * File a resource.
             * @param {string} id - Resource id.
             * @returns {Promise} - Deferred promise.
             */
            s.one = function one(id) {
                var url = formatUrl({{one}}, {_id: id});
                return apiService.get(url);
            };

{{/if}}
{{#if create}}            /**
             * Create a resource.
             * @param {object} data - Data to create.
             * @returns {Promise} - Deferred promise.
             */
            s.create = function create(data) {
                var url = {{create}};
                return apiService.post(url, data);
            }

{{/if}}
{{#if update}}            /**
             * Update a resouce.
             * @param {string} id - Resource id.
             * @param {object} data - Data to update.
             * @returns {Promise} - Deferred promise.
             */
            s.update = function update(id, data) {
                    var url = formatUrl({{update}}, {_id: id});
                    return apiService.put(url, data);
            }

{{/if}}
{{#if destroy}}            /**
             * Destroy a resouce.
             * @param {string} id - Resource id.
             * @returns {Promise} - Deferred promise.
             */
            s.destroy = function destroy(id) {
                var url = formatUrl({{destroy}}, {_id: id});
                return apiService.delete(url);
            }

{{/if}}
{{#if singleton}}            /**
             * Get the singleton data.
             * @returns {Promise} - Deferred promise.
             */
            s.singleton = function singleton() {
                var url = {{singleton}};
                return apiService.get(url);
            }

{{/if}}
        });
})(angular);